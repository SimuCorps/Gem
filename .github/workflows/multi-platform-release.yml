name: Multi-Platform Release

on:
  release:
    types: [created]

jobs:
  build-multi-platform:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux-x64
            binary_name: gemc
            archive_name: gemc-linux-x64.tar.gz
          - os: macos-latest
            target: macos-x64
            binary_name: gemc
            archive_name: gemc-macos-x64.tar.gz
          - os: windows-latest
            target: windows-x64
            binary_name: gemc.exe
            archive_name: gemc-windows-x64.zip
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential curl
        
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # macOS comes with curl and build tools via Xcode
        xcode-select --install || true
        
    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Install curl via chocolatey (usually pre-installed on GitHub runners)
        choco install curl -y || echo "curl already installed"
        
    - name: Extract version information
      id: version
      shell: bash
      run: |
        # Source the version configuration
        source version.conf
        
        # Calculate version strings
        if [ -z "$VERSION_SUFFIX" ]; then
          VERSION_STRING="${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"
        else
          VERSION_STRING="${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}-${VERSION_SUFFIX}"
        fi
        VERSION_DISPLAY="v${VERSION_STRING}"
        
        echo "version_string=${VERSION_STRING}" >> $GITHUB_OUTPUT
        echo "version_display=${VERSION_DISPLAY}" >> $GITHUB_OUTPUT
        
    - name: Build gemc (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        make clean
        make gemc
        
    - name: Build gemc (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        gcc src/*.c -o bin/gemc.exe -O3 -flto -DNDEBUG -lm -DWITH_STL -DSTL_PATH="stl"
        
    - name: Verify build
      shell: bash
      run: |
        ls -la bin/
        ./bin/${{ matrix.binary_name }} --version || echo "Version check failed"
        
    - name: Prepare release package (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p release-${{ matrix.target }}
        cp bin/${{ matrix.binary_name }} release-${{ matrix.target }}/
        
        # Create installation script
        cat > release-${{ matrix.target }}/install.sh << 'EOF'
        #!/bin/bash
        # Gem Programming Language Installer for ${{ matrix.target }}
        
        echo "Installing Gem Programming Language..."
        
        # Determine install directory
        if [ "$EUID" -eq 0 ]; then
          INSTALL_DIR="/usr/local/bin"
        else
          INSTALL_DIR="$HOME/.local/bin"
          mkdir -p "$INSTALL_DIR"
        fi
        
        # Copy binary
        cp gemc "$INSTALL_DIR/gemc"
        chmod +x "$INSTALL_DIR/gemc"
        
        echo "Gem installed to $INSTALL_DIR/gemc"
        echo "Make sure $INSTALL_DIR is in your PATH"
        echo ""
        echo "Test installation with: gemc --version"
        EOF
        
        chmod +x release-${{ matrix.target }}/install.sh
        
        # Create README
        cat > release-${{ matrix.target }}/README.md << EOF
        # Gem Programming Language ${{ steps.version.outputs.version_display }} - ${{ matrix.target }}
        
        ## Installation
        
        ### Quick Install
        \`\`\`bash
        chmod +x install.sh
        ./install.sh
        \`\`\`
        
        ### Manual Install
        1. Copy \`gemc\` to a directory in your PATH
        2. Make it executable: \`chmod +x gemc\`
        
        ## Usage
        
        \`\`\`bash
        gemc --version
        gemc program.gem
        gemc  # Start REPL
        \`\`\`
        
        ## Documentation
        
        Visit [https://simucorps.github.io/Gem/](https://simucorps.github.io/Gem/)
        EOF
        
        # Create archive
        tar -czf ${{ matrix.archive_name }} -C release-${{ matrix.target }} .
        
    - name: Prepare release package (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        mkdir -p release-${{ matrix.target }}
        cp bin/${{ matrix.binary_name }} release-${{ matrix.target }}/
        
        # Create installation batch script
        cat > release-${{ matrix.target }}/install.bat << 'EOF'
        @echo off
        echo Installing Gem Programming Language...
        
        REM Create local bin directory if it doesn't exist
        if not exist "%USERPROFILE%\.local\bin" mkdir "%USERPROFILE%\.local\bin"
        
        REM Copy binary
        copy gemc.exe "%USERPROFILE%\.local\bin\gemc.exe"
        
        echo Gem installed to %USERPROFILE%\.local\bin\gemc.exe
        echo.
        echo Add %USERPROFILE%\.local\bin to your PATH environment variable
        echo Test installation with: gemc --version
        pause
        EOF
        
        # Create README
        cat > release-${{ matrix.target }}/README.md << EOF
        # Gem Programming Language ${{ steps.version.outputs.version_display }} - ${{ matrix.target }}
        
        ## Installation
        
        ### Quick Install
        1. Run \`install.bat\` as Administrator (or regular user for user-only install)
        2. Add the install directory to your PATH
        
        ### Manual Install
        1. Copy \`gemc.exe\` to a directory in your PATH
        2. Or create a directory like \`C:\Program Files\Gem\` and add it to PATH
        
        ## Usage
        
        \`\`\`cmd
        gemc --version
        gemc program.gem
        gemc  REM Start REPL
        \`\`\`
        
        ## Documentation
        
        Visit [https://simucorps.github.io/Gem/](https://simucorps.github.io/Gem/)
        EOF
        
        # Create zip archive
        cd release-${{ matrix.target }}
        7z a ../${{ matrix.archive_name }} *
        cd ..
        
    - name: Upload release asset
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.release.tag_name }}
        files: ${{ matrix.archive_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 